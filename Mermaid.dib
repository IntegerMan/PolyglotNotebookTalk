#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# Mermaid
This notebook focuses on working with Mermaid Diagrams

#!markdown

## Class Diagrams

#!mermaid

classDiagram
    class GameObject {
        +String Name
        +int PosX
        +int PosY
        +Despawn() void
    }

#!mermaid

classDiagram
    class GameObject {
        +String Name
        +int PosX
        +int PosY
        +Despawn() void
    }
    class DamageableObject {
        <<abstract>>
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled()* void
    }
    GameObject <|-- DamageableObject

#!mermaid

classDiagram
    class GameObject {
        +String Name
        +int PosX
        +int PosY
        +Despawn() void
    }
    class DamageableObject {
        <<abstract>>
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled()* void
    }
    class Player {
        -int Score
        -int LivesRemaining
        +OnKilled() void
    }
    class Monster {
        -int ThreatLevel
        -Color Color
        +MakeNoise() string
        +OnKilled() void
    }
    GameObject <|-- DamageableObject
    DamageableObject <|-- Player
    DamageableObject <|-- Monster

#!mermaid

classDiagram
    GameObject <-- DamageableObject
    GameObject : +String Name
    GameObject : +Point Position
    GameObject <-- SpecialEffect
    SpecialEffect: -double Intensity
    SpecialEffect: +PlayEffect()
    DamageableObject : -int HitPoints
    DamageableObject : +bool IsDead
    DamageableObject: +TakeDamage(int damage)
    DamageableObject <-- Player
    DamageableObject <-- Monster
    Player: -int Score
    Player: -int LivesLeft
    Player: +RewardForKill(Monster)
    Monster: -int PointValue
    Monster: -int ThreatLevel
    Monster: +Kill()

#!markdown

## Sequence Diagrams

#!mermaid

sequenceDiagram
    autonumber
    Client->>+Server: Login (Username, Password)
    Server->>+Database: Select Hash & Salt for User
    Database-->>-Server: Hash & Salt
    Server->>Server: Calculate Hash of Salted Password
    alt calculated hash matches stored hash
        Server->>Server: Generate JWT
        Note right of Database: JWT is not stored
        Server-->>Client: JSON Web Token (JWT)
    else Incorrect Username or Password
        Server-->>Client: 401 Unauthorized
    end
    deactivate Server
    note over Client, Server: Subsequent requests include JWT in Header

#!markdown

## Flowchart

#!mermaid

flowchart LR
    G["Local Git Repository"] -->|PyDriller| C["Commits.csv"]
    C -->|Per-File Commits| FC[FileCommits.csv]
    G -->|Traverse Directory Tree| FS[FileSizes.csv]
    FC --> MFC["MergedFileCommits.csv"]
    FS --> MFC
    FS --> FD["FileData.csv"]
    FC --> FD
    subgraph Analysis Data Sets
    MFC
    FD
    end
    classDef highlight fill:#f9f

#!mermaid

flowchart LR
    A["Commit 3-4cd5c84"] --> E["Extraction Script"]
    E --> B["Main.py"]
    E --> C["Parser.py"]
    E --> D["README.md"]
    B --> FC["FileCommits.csv"]
    C --> FC["FileCommits.csv"]
    D --> FC["FileCommits.csv"]

#!markdown

## Git Data

#!mermaid

gitGraph
    commit
    commit
    branch feature
    checkout feature
    commit
    commit
    commit
    checkout main
    commit
    commit
    merge feature
    commit
    commit

#!markdown

## Entity Relationship Diagram

See [My Article on Entity Relationship Diagrams in Mermaid.js](https://newdevsguide.com/2023/04/08/creating-erds-with-mermaid/) for more information on ERDs.

#!mermaid

erDiagram
    USER ||--o{ POST : "creates"
    POST }o--|| FORUM : "belongs to"
    USER ||--o{ COMMENT : "creates"
    COMMENT }o--|| POST : "is on"
    %% COMMENT o|--|| COMMENT : "is in reply to"
    USER ||--o{ FORUM : "created"

#!mermaid

erDiagram
    CITY
    STATE
    COUNTRY

#!mermaid

erDiagram
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!mermaid

erDiagram
    CITY {
        int city_id
        string name
        string state_abbreviation
    }
    STATE {
        string state_abbreviation
        string name
        int country_id
    }
    COUNTRY {
        int country_id
        string name
    }
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!mermaid

erDiagram
    CITY {
        int city_id PK
        string name
        string state_abbreviation FK
    }
    STATE {
        string state_abbreviation PK
        string name
        int country_id FK
    }
    COUNTRY {
        int country_id PK
        string name
    }
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!markdown

## Timeline (Not Yet Supported)

#!mermaid

timeline
    title Major .NET Releases
    section .NET Framework
        2002 : .NET Framework 1.0
             : .NET Framework 1.0 SP1
             : .NET Framework 1.0 SP2
        2003 : .NET Framework 1.1
        2004 : .NET Framework 1.0 SP3
        2005 : .NET Framework 2.0
        2006 : .NET Framework 3.0
        2007 : .NET Framework 3.5 
             : .NET Framework 2.0 SP 1 
             : .NET Framework 3.0 SP 1 
        2008 : .NET Framework 2.0 SP 2 
             : .NET Framework 3.0 SP 2 
             : .NET Framework 3.5 SP 1
        2010 : .NET Framework 4.0
        2012 : .NET Framework 4.5
        2013 : .NET Framework 4.5.1
        2014 : .NET Framework 4.5.2
        2015 : .NET Framework 4.6
             : .NET Framework 4.6.1
    section .NET Core
        2016 : .NET Core 1.0
             : .NET Core 1.1
             : .NET Framework 4.6.2
        2017 : .NET Core 2.0
             : .NET Framework 4.7
             : .NET Framework 4.7.1
        2018 : .NET Core 2.1
             : .NET Core 2.2
             : .NET Framework 4.7.2
             
        2019 : .NET Core 3.0
             : .NET Core 3.1
             : .NET Framework 4.8
    section Modern .NET
        2020 : .NET 5
        2021 : .NET 6
        2022 : .NET 7
             : .NET Framework 4.8.1

#!markdown

Timeline View isn't supported in Mermaid 9.1.7 which is what Polylgot currently uses, so here's a screenshot of the results:

![Timeline View](Images/Timeline.png)

#!markdown

## Gantt Chart

#!mermaid

gantt
    title Preparing Polyglot Notebooks Talk for Stir Trek 2023
    dateFormat YYYY-MM-DD
    section Proposal and Evaluation
        Submit Abstract :done, submit, 2023-01-15, 2023-02-18
        Session Evaluation :done, eval, after submit, 2023-03-05
        Talk Accepted :milestone,done, accepted, after eval, 1d
    section Talk Preparation
        Research & Outlining :done,crit research, after accepted, 9d
        Create Mermaid Examples :active, mermaid, 2023-03-12, 2023-04-08
        Write Mermaid Articles :after mermaid, 7d
        Write Jupyter Articles : 2023-04-15, 2d
        Deep Dive into Polyglot :crit, 2023-04-08, 2w
        Write Polyglot Articles : 2023-04-22, 7d
    section Delivery
        Final Notebook Arrangement :crit, 2023-04-22, 7d
        Rehearsal :crit, 2023-04-29, 2023-05-04
        Stir Trek 2023 :milestone,crit, 2023-05-05, 1d

#!markdown

## State Diagram / Finite State Machines (FSM)

#!mermaid

stateDiagram-v2
    [*] --> Patroling
    Patroling --> Searching : I think I saw something...
    Searching --> Attacking : Enemy located
    Searching --> Patroling : Must be nothing
    Attacking --> Searching : Where did they go?
    Attacking --> Patroling : Enemy defeated
    Patroling --> Dead
    Searching --> Dead
    Attacking --> Dead

#!markdown

## Pie Chart

#!mermaid

pie title Leading Causes of Developer Tears
    "JavaScript": 42
    "DNS": 8
    "Leaving a VM on": 15

#!markdown

## User Journey

#!mermaid

journey
    title Using Polyglot Notebooks
    section Setup
        Install Polyglot Notebooks : 5: Me
        Install NuGet Packages : 2 : Me
    section Usage
        %% # is not allowed
        Write CSharp in a Notebook : 5 : Me, dotnet
        Write FSharp in a Notebook : 5 : Me, dotnet
        Share Variables in a Notebook : 3 : Me
        Use Mermaid Diagrams : 4 : Me, Mermaid.js
        Troubleshoot Mermaid Issues : 1 : Me, Mermaid.js

#!markdown

## Mindmap (Not Yet Supported)

#!mermaid

mindmap
    Talk
        Notebooks
            What
            Why
            How
        Jupyter Notebooks
            IDEs
                VS Code
                DataSpell
                Web Browser
            Anaconda
        Polyglot Notebooks
            Installation
            Languages
                CSharp
                FSharp
                JS
                CSS
                SQL
                KQL
                Mermaid
                    Class Diagram
                    Gantt
                    Timeline
                    User Experience Journey
                    Pie Chart
                    ERD
                    Mindmaps
                    Requirements
            Variable Sharing
        Next Steps

#!markdown

Mindmap diagrams are not supported on Mermaid.js version 9.1.7, which is the current version used by Polyglot Notebooks, so here's a screenshot:

![Mindmap Diagram](images/Mindmap.png)

#!markdown

## Requirement Diagram

#!mermaid

requirementDiagram

designConstraint dark_theme {
    id: 1
    text: Dark Themes Rule!
    risk: low
    verifymethod: inspection
}

element revised_skin {
    type: css,
    docRef: theme.css
}

revised_skin - satisfies -> dark_theme

#!markdown

## Context Diagram

#!mermaid

C4Context
title GitStractor Context Diagram

UpdateLayoutConfig($c4ShapeInRow="2", $c4BoundaryInRow="1")

Enterprise_Boundary(bMain, "GitStractor") {
    ContainerDb(cGit, "Git Repository", "git", "A locally-cloned git repository")

    Component(cGitStractor, "GitStractor Class Library", "C# Class Library", "Core library used for pulling data out of git repositories")

    Container_Boundary(bUI, "User Interface") {
        UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
        Container(cWPF, "GitStractor Desktop Edition", "Dotnet and C#", "Stand-Alone Utility for pulling and visualizing data")
        Container(cJupyter, "GitStractor Juypter Edition", "Jupyter Notebook", "Uses Python, Plotly, and Pandas to visualize data")
        Container(cBI, "Power BI Template", "Power BI", "Visualize Data with Dedicated Tooling")
    }

    Container(cExe, "GitStract.exe", "Dotnet and C#", "Pulls Git Information into data files")

    ContainerDb(cData, "Data Files", "CSV Files", "Stores information on commits and files")
}

Rel(cGitStractor, cGit, "Analyzes")
Rel(cGitStractor, cData, "Creates")
Rel(cExe, cGitStractor, "Uses")
Rel(cWPF, cGitStractor, "Uses")
Rel(cData, cWPF, "Used by")
Rel(cData, cJupyter, "Used by")
Rel(cData, cBI, "Used by")
