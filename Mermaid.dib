#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# Mermaid
This notebook focuses on working with Mermaid Diagrams

#!markdown

## Class Diagrams

See [my article on class diagrams](https://newdevsguide.com/2023/04/08/mermaid-class-diagrams/) for additional context & information

#!mermaid

classDiagram
    class GameObject {
        -String Name
        -int PosX
        -int PosY
        +Despawn() void
    }

#!mermaid

classDiagram
    class GameObject
    GameObject : -String Name
    GameObject : -int PosX
    GameObject : -int PosY
    GameObject : +Despawn() void

#!mermaid

classDiagram
    class GameObject {
        -String Name
        -int PosX
        -int PosY
        +Despawn() void
    }
    class DamageableObject {
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled() void
    }
    GameObject <|-- DamageableObject

#!mermaid

classDiagram
    Human *-- Cells : Is Composed of
    Salesperson o-- Sales : Makes

#!mermaid

classDiagram
    Human *-- Cells : composed of
    Salesperson o-- Sales : makes
    Human <|-- Salesperson : is

#!mermaid

classDiagram
    Human "1" *-- "*" Cells : composed of
    Salesperson "1" o-- "0..*" Sales : makes
    Human <|-- Salesperson : is

#!mermaid

classDiagram
    class GameObject {
        -String Name
        -int PosX
        -int PosY
        +Despawn() void
    }
    class DamageableObject {
        <<abstract>>
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled()* void
    }
    GameObject <|-- DamageableObject

#!mermaid

classDiagram
    class GameObject {
        +String Name
        +int PosX
        +int PosY
        +Despawn() void
    }
    class DamageableObject {
        <<abstract>>
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled()* void
    }
    class Player {
        -int Score
        -int LivesRemaining
        +OnKilled() void
    }
    class Monster {
        -int ThreatLevel
        -Color Color
        +MakeNoise(double decibelLevel) string
        +OnKilled() void
    }
    GameObject <|-- DamageableObject
    DamageableObject <|-- Player
    DamageableObject <|-- Monster

#!mermaid

classDiagram
    %% note "This is a note for the whole diagram"
    %% note for Player "This is a note on a specific class"
    class GameObject {
        +String Name
        +int PosX
        +int PosY
        +Despawn() void
    }
    class DamageableObject {
        <<abstract>>
        +int MaxHealth
        -int Health
        +IsDead() bool
        +TakeDamage(int damage) void
        +OnKilled()* void
    }
    class Player {
        -int Score
        -int LivesRemaining
        +OnKilled() void
    }
    class Monster {
        -int ThreatLevel
        -Color Color
        +MakeNoise(double decibelLevel) string
        +OnKilled() void
    }
    GameObject <|-- DamageableObject
    DamageableObject <|-- Player
    DamageableObject <|-- Monster

#!mermaid

classDiagram
    class Queue~T~ {
        -IEnumerable~T~ items
        +Enqueue(T item) void
        +Dequeue() T
        +HasItems() bool
    }

#!mermaid

classDiagram
    class ColorManager {
        -Dictionary~string_Color~ hexColors$
        +BuildColorFromHex(string hexCode)$ Color
    }

#!mermaid

classDiagram
    GameObject <-- DamageableObject
    GameObject : +String Name
    GameObject : +Point Position
    GameObject <-- SpecialEffect
    SpecialEffect: -double Intensity
    SpecialEffect: +PlayEffect()
    DamageableObject : -int HitPoints
    DamageableObject : +bool IsDead
    DamageableObject: +TakeDamage(int damage)
    DamageableObject <-- Player
    DamageableObject <-- Monster
    Player: -int Score
    Player: -int LivesLeft
    Player: +RewardForKill(Monster)
    Monster: -int PointValue
    Monster: -int ThreatLevel
    Monster: +Kill()

#!markdown

## Sequence Diagrams

#!mermaid

sequenceDiagram
    Client->>Server: Login (Username, Password)
    Server-->>Client: 200 OK & JWT

#!mermaid

sequenceDiagram
    Client->>Server: Login (Username, Password)
    Server->>Database: Select User Info
    Database-->>Server: Salt & Hash
    Server-->>Client: 200 OK & JWT

#!mermaid

sequenceDiagram
    participant C as Client
    participant DB as Database
    participant S as Server
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    DB-->>S: Salt & Hash
    S-->>C: 200 OK & JWT

#!mermaid

sequenceDiagram
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    DB-->>S: Salt & Hash
    S-->>C: 200 OK & JWT

#!mermaid

sequenceDiagram
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    note over DB: Password is not stored in database
    DB-->>S: Salt & Hash
    S-->>C: 200 OK & JWT
    note over C, S: Subsequent requests include JWT

#!mermaid

sequenceDiagram
    autonumber
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    note over DB: Password is not stored in database
    DB-->>S: Salt & Hash
    S-->>C: 200 OK & JWT
    note over C, S: Subsequent requests include JWT

#!mermaid

sequenceDiagram
    autonumber
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    note over DB: Password is not stored in database
    DB-->>S: Salt & Hash
    S->>S: Check Computed Hash using Salt
    S->>S: Generate JWT
    S-->>C: 200 OK & JWT
    note over C, S: Subsequent requests include JWT

#!mermaid

sequenceDiagram
    autonumber
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    S->>DB: Select User Info
    note over DB: Password is not stored in database
    DB-->>S: Salt & Hash
    S->>S: Check Computed Hash using Salt
    alt Computed Hash Matches
        S->>S: Generate JWT
        S-->>C: 200 OK & JWT
    else No user or wrong password
        S-->>C: 401 Unauthorized
    end
    note over C, S: Subsequent requests include JWT

#!mermaid

sequenceDiagram
    autonumber
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>S: Login (Username, Password)
    activate S
        S->>DB: Select User Info
        
        activate DB
            note over DB: Password is not stored in database
            DB-->>S: Salt & Hash
        deactivate DB

        S->>S: Check Computed Hash using Salt
        alt Computed Hash Matches
            S->>S: Generate JWT
            S-->>C: 200 OK & JWT
        else No user or wrong password
            S-->>C: 401 Unauthorized
        end
    deactivate S
    note over C, S: Subsequent requests include JWT

#!mermaid

sequenceDiagram
    autonumber
    actor C as Client
    participant S as Server
    participant DB as Database
    C->>+S: Login (Username, Password)
        S->>+DB: Select User Info
            note over DB: Password is not stored in database
        DB-->>-S: Salt & Hash

        S->>S: Check Computed Hash using Salt
        alt Computed Hash Matches
            S->>S: Generate JWT
            S-->>C: 200 OK & JWT
        else No user or wrong password
            S-->>C: 401 Unauthorized
        end
        note over C, S: Subsequent requests include JWT
    deactivate S

#!mermaid

sequenceDiagram
    autonumber
    Client->>+Server: Login (Username, Password)
    Server->>+Database: Select Hash & Salt for User
    Database-->>-Server: Hash & Salt
    Server->>Server: Calculate Hash of Salted Password
    alt calculated hash matches stored hash
        Server->>Server: Generate JWT
        Note right of Database: JWT is not stored
        Server-->>Client: JSON Web Token (JWT)
    else Incorrect Username or Password
        Server-->>Client: 401 Unauthorized
    end
    deactivate Server
    note over Client, Server: Subsequent requests include JWT in Header

#!markdown

## Flowchart

#!mermaid

flowchart
    Client
    Server
    Database

#!mermaid

flowchart
    Client --> Server
    Server --> Database

#!mermaid

flowchart LR
    Client --> Server
    Server --> Database

#!mermaid

flowchart LR
    Client --> Server
    Server --> Database
    Database -.-> Server
    Server -.-> Client

#!mermaid

flowchart LR
    c[Client]
    s[Server]
    db[Database]
    
    c -- HTTP GET --> s
    s -- SQL Query --> db
    db -. Result Set .-> s
    s -. JSON .-> c

#!mermaid

flowchart LR
    Base --> Arrow
    Base ==> Heavy
    Base -.-> Dotted
    Base --- Line
    Base --> You --> Can --> Chain --> Relations --> On --> One --- Line

#!mermaid

flowchart LR
    c[Client]
    s[Server]
    db[(Database)]
    
    c -- HTTP GET --> s
    s -- SQL Query --> db
    db -. Result Set .-> s
    s -. JSON .-> c

#!mermaid

flowchart
    a[Default]
    b([Rounded])
    c[(Database)]
    d[[Subroutine]]
    e((Circle))
    f>Note]
    g{Decision}
    h{{Hexagon}}
    i[/Parallelogram/]
    j(((Double Circle)))

#!mermaid

flowchart LR
    subgraph Azure
        s[Server]
        db[(Database)]
    end
    subgraph Netlify
        c[Client]
    end

    c -- HTTP GET --> s
    s -. JSON .-> c    
    db -. Result Set .-> s
    s -- SQL Query --> db

#!mermaid

flowchart LR
    subgraph Azure
        s[fa:fa-code Server]
        db[(fa:fa-table Database)]
    end
    subgraph Netlify
        c[fa:fa-user Client]
    end

    subgraph Netlify
    end
    subgraph Azure
        direction LR
    end
    
    c -- HTTP GET --> s
    s -- SQL Query --> db
    db -. Result Set .-> s
    s -. JSON .-> c

#!mermaid

flowchart LR
    G["Local Git Repository"] -->|PyDriller| C["Commits.csv"]
    C -->|Per-File Commits| FC[FileCommits.csv]
    G -->|Traverse Directory Tree| FS[FileSizes.csv]
    FC --> MFC["MergedFileCommits.csv"]
    FS --> MFC
    FS --> FD["FileData.csv"]
    FC --> FD
    subgraph Analysis Data Sets
    MFC
    FD
    end
    classDef highlight fill:#f9f

#!mermaid

flowchart LR
    A["Commit 3-4cd5c84"] --> E["Extraction Script"]
    E --> B["Main.py"]
    E --> C["Parser.py"]
    E --> D["README.md"]
    B --> FC["FileCommits.csv"]
    C --> FC["FileCommits.csv"]
    D --> FC["FileCommits.csv"]

#!markdown

## Git Data

#!mermaid

gitGraph
    commit
    commit
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit
    commit id: "Fixed Issue #42"
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit
    commit
    branch feature
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit
    commit
    branch feature
    commit id: "Dark Theme"
    checkout main
    merge feature
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit
    branch feature
    checkout main
    commit
    branch bugfix
    commit
    checkout feature
    commit id: "Dark Theme"
    checkout main
    merge feature
    commit
    checkout bugfix
    commit id: "Fixed Null Ref"
    checkout main
    merge bugfix
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit tag: "v0.4.0"
    branch feature
    checkout main
    commit
    branch bugfix
    commit
    checkout feature
    commit id: "Dark Theme"
    checkout main
    merge feature
    commit tag: "v0.4.1"
    commit
    checkout bugfix
    commit id: "Fixed Null Ref"
    checkout main
    merge bugfix tag: "v0.4.2"
    commit

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit tag: "v0.4.0"
    branch feature
    checkout main
    commit
    branch bugfix
    commit id: "Whoopsies" type: REVERSE
    checkout feature
    commit id: "Dark Theme"
    checkout main
    merge feature
    commit tag: "v0.4.1"
    commit type: HIGHLIGHT
    checkout bugfix
    commit id: "Fixed Null Ref"
    checkout main
    merge bugfix tag: "v0.4.2"

#!mermaid

%%{init: { 'theme': 'base' } }%%
gitGraph
    commit
    commit
    branch feature
    commit
    checkout main
    commit
    merge feature
    commit

#!mermaid

gitGraph
    commit
    commit
    branch feature
    checkout feature
    commit
    commit
    commit
    checkout main
    commit
    commit
    merge feature
    commit
    commit

#!markdown

## Entity Relationship Diagram

See [My Article on Entity Relationship Diagrams in Mermaid.js](https://newdevsguide.com/2023/04/08/creating-erds-with-mermaid/) for more information on ERDs.

#!mermaid

erDiagram
    USER ||--o{ POST : "creates"
    POST }o--|| FORUM : "belongs to"
    USER ||--o{ COMMENT : "creates"
    COMMENT }o--|| POST : "is on"
    %% COMMENT o|--|| COMMENT : "is in reply to"
    USER ||--o{ FORUM : "created"

#!mermaid

erDiagram
    CITY
    STATE
    COUNTRY

#!mermaid

erDiagram
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!mermaid

erDiagram
    CITY {
        int city_id
        string name
        string state_abbreviation
    }
    STATE {
        string state_abbreviation
        string name
        int country_id
    }
    COUNTRY {
        int country_id
        string name
    }
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!mermaid

erDiagram
    CITY {
        int city_id PK
        string name
        string state_abbreviation FK
    }
    STATE {
        string state_abbreviation PK
        string name
        int country_id FK
    }
    COUNTRY {
        int country_id PK
        string name
    }
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!markdown

## Timeline (Not Yet Supported)

#!mermaid

timeline
    2000 - 2005 
    2006 - 2009 
    2010 - 2015 
    2016 - 2017 
    2018 - 2019 
    2020
    2021 
    2022

#!mermaid

timeline
    2000 - 2005 
        : .NET Framework 1.0
        : .NET Framework 1.0 SP1
        : .NET Framework 1.0 SP2
        : .NET Framework 1.1
        : .NET Framework 1.0 SP3
        : .NET Framework 2.0
    2006 - 2009 
        : .NET Framework 3.0
        : .NET Framework 3.5 
        : .NET Framework 2.0 SP 1 
        : .NET Framework 3.0 SP 1 
        : .NET Framework 2.0 SP 2 
        : .NET Framework 3.0 SP 2 
        : .NET Framework 3.5 SP 1
    2010 - 2015 
        : .NET Framework 4.0
        : .NET Framework 4.5
        : .NET Framework 4.5.1
        : .NET Framework 4.5.2
        : .NET Framework 4.6
        : .NET Framework 4.6.1
    2016 - 2017 
        : .NET Core 1.0
        : .NET Core 1.1
        : .NET Framework 4.6.2
        : .NET Core 2.0
        : .NET Framework 4.7
        : .NET Framework 4.7.1
    2018 - 2019 
        : .NET Core 2.1
        : .NET Core 2.2
        : .NET Framework 4.7.2             
        : .NET Core 3.0
        : .NET Core 3.1
        : .NET Framework 4.8
    2020 
        : .NET 5
    2021 
        : .NET 6
    2022 
        : .NET 7
        : .NET Framework 4.8.1

#!mermaid

timeline
    section .NET Framework
        2000 - 2005 
             : .NET Framework 1.0
             : .NET Framework 1.0 SP1
             : .NET Framework 1.0 SP2
             : .NET Framework 1.1
             : .NET Framework 1.0 SP3
             : .NET Framework 2.0
        2006 - 2009 
             : .NET Framework 3.0
             : .NET Framework 3.5 
             : .NET Framework 2.0 SP 1 
             : .NET Framework 3.0 SP 1 
             : .NET Framework 2.0 SP 2 
             : .NET Framework 3.0 SP 2 
             : .NET Framework 3.5 SP 1
        2010 - 2015 
             : .NET Framework 4.0
             : .NET Framework 4.5
             : .NET Framework 4.5.1
             : .NET Framework 4.5.2
             : .NET Framework 4.6
             : .NET Framework 4.6.1
    section .NET Core
        2016 - 2017 
             : .NET Core 1.0
             : .NET Core 1.1
             : .NET Framework 4.6.2
             : .NET Core 2.0
             : .NET Framework 4.7
             : .NET Framework 4.7.1
        2018 - 2019 
             : .NET Core 2.1
             : .NET Core 2.2
             : .NET Framework 4.7.2             
             : .NET Core 3.0
             : .NET Core 3.1
             : .NET Framework 4.8
    section Modern .NET
        2020 : .NET 5
        2021 : .NET 6
        2022 : .NET 7
             : .NET Framework 4.8.1

#!mermaid

timeline
    title Major .NET Releases
    section .NET Framework
        2000 - 2005 
             : .NET Framework 1.0
             : .NET Framework 1.0 SP1
             : .NET Framework 1.0 SP2
             : .NET Framework 1.1
             : .NET Framework 1.0 SP3
             : .NET Framework 2.0
        2006 - 2009 
             : .NET Framework 3.0
             : .NET Framework 3.5 
             : .NET Framework 2.0 SP 1 
             : .NET Framework 3.0 SP 1 
             : .NET Framework 2.0 SP 2 
             : .NET Framework 3.0 SP 2 
             : .NET Framework 3.5 SP 1
        2010 - 2015 
             : .NET Framework 4.0
             : .NET Framework 4.5
             : .NET Framework 4.5.1
             : .NET Framework 4.5.2
             : .NET Framework 4.6
             : .NET Framework 4.6.1
    section .NET Core
        2016 - 2017 
             : .NET Core 1.0
             : .NET Core 1.1
             : .NET Framework 4.6.2
             : .NET Core 2.0
             : .NET Framework 4.7
             : .NET Framework 4.7.1
        2018 - 2019 
             : .NET Core 2.1
             : .NET Core 2.2
             : .NET Framework 4.7.2             
             : .NET Core 3.0
             : .NET Core 3.1
             : .NET Framework 4.8
    section Modern .NET
        2020 : .NET 5
        2021 : .NET 6
        2022 : .NET 7
             : .NET Framework 4.8.1

#!markdown

Timeline View isn't supported in Mermaid 9.1.7 which is what Polylgot currently uses, so here's a screenshot of the results:

![Timeline View](Images/Timeline.png)

#!markdown

## Gantt Chart

#!mermaid

gantt
    title Write about Mermaid.js Gantt Charts
    Create code for Gantt chart     : 2023-04-11, 2d
    Outline article on Gantt charts : 2023-04-12, 2d
    Write article on Gantt charts   : 2023-04-13, 1d
    Publish article on Gantt charts : 2023-04-14, 1d

#!mermaid

gantt
    title Write about Mermaid.js Gantt Charts
    Create code for Gantt chart     :done, crit,   2023-04-11, 2d
    Outline article on Gantt charts :done,         2023-04-12, 2d
    A Standard Task                 :              2023-04-12, 2d
    Write article on Gantt charts   :active, crit, 2023-04-13, 1d
    Publish article on Gantt charts :crit,         2023-04-14, 1d

#!mermaid

gantt
    title Preparing Polyglot Notebooks Talk for Stir Trek 2023
    section Proposal and Evaluation
        Submit Abstract         :done,                2023-01-15, 2023-02-18
        Session Evaluation      :done,                2023-02-18, 2023-03-05
        Talk Accepted           :milestone, done,     2023-03-05, 2023-03-05
    section Talk Preparation
        Research & Outlining    :done,                2023-03-12, 9d
        Create Mermaid Examples :done,                2023-03-12, 2023-04-08
        Write Mermaid Articles  :active,              2023-04-08, 7d
        Write Jupyter Articles  :                     2023-04-15, 2d
        Deep Dive into Polyglot :crit,                2023-04-08, 2w
        Write Polyglot Articles :                     2023-04-18, 7d
    section Delivery
        Final Notebook          :crit,                2023-04-22, 7d
        Rehearsal               :crit,                2023-04-29, 2023-05-04
        Stir Trek 2023          :milestone, crit,     2023-05-05, 1d

#!mermaid

gantt
    title Preparing Polyglot Notebooks Talk for Stir Trek 2023
    section Proposal and Evaluation
        Submit Abstract         :done,                2023-01-15, 2023-02-18
        Session Evaluation      :done, EVAL           2023-02-18, 2023-03-05
        Talk Accepted           :milestone, done,     after EVAL
    section Talk Preparation
        Research & Outlining    :done, OUTLINE,       2023-03-12, 9d
        Create Mermaid Examples :done, MER_EXAMPLE,   after OUTLINE, 5d
        Write Mermaid Articles  :active, MER_ART,     after MER_EXAMPLE, 7d
        Write Jupyter Articles  :                     after MER_ART, 3d
        Deep Dive into Polyglot :crit,                2023-04-05, 2w
        Write Polyglot Articles :                     2023-04-12, 10d
    section Delivery
        Final Notebook          :crit, NOTEBOOK,      2023-04-19, 7d
        Rehearsal               :crit,                after NOTEBOOK, 2023-05-04
        Stir Trek 2023          :milestone, crit,     2023-05-05, 1d

#!mermaid

gantt
    axisFormat %Y-%m-%d
    title Write about Mermaid.js Gantt Charts
    Create code for Gantt chart     :done, crit,   2023-04-11, 2d
    Outline article on Gantt charts :done,         2023-04-12, 2d
    A Standard Task                 :              2023-04-12, 2d
    Write article on Gantt charts   :active, crit, 2023-04-13, 1d
    Publish article on Gantt charts :crit,         2023-04-14, 1d

#!mermaid

gantt
    title Preparing Polyglot Notebooks Talk for Stir Trek 2023
    dateFormat YYYY-MM-DD
    section Proposal and Evaluation
        Submit Abstract :done, submit, 2023-01-15, 2023-02-18
        Session Evaluation :done, eval, after submit, 2023-03-05
        Talk Accepted :milestone,done, accepted, after eval, 1d
    section Talk Preparation
        Research & Outlining :done,crit research, after accepted, 9d
        Create Mermaid Examples :active, mermaid, 2023-03-12, 2023-04-08
        Write Mermaid Articles :after mermaid, 7d
        Write Jupyter Articles : 2023-04-15, 2d
        Deep Dive into Polyglot :crit, 2023-04-08, 2w
        Write Polyglot Articles : 2023-04-22, 7d
    section Delivery
        Final Notebook Arrangement :crit, 2023-04-22, 7d
        Rehearsal :crit, 2023-04-29, 2023-05-04
        Stir Trek 2023 :milestone,crit, 2023-05-05, 1d

#!markdown

## State Diagram / Finite State Machines (FSM)

#!mermaid

stateDiagram-v2
    [*] --> Descending
    Descending --> Attack
    Attack --> Pain
    Pain --> Attack
    Attack --> Dead
    Pain --> Dead
    Dead --> [*]

#!mermaid

stateDiagram-v2
    direction LR
    [*] --> Descending
    Descending --> Attack
    Attack --> Pain
    Pain --> Attack
    Attack --> Dead
    Pain --> Dead
    Dead --> [*]

#!mermaid

stateDiagram-v2
    [*] --> Descending      : Player entered arena
    Descending --> Attack   : After roar animation
    Attack --> Pain         : Hurt a lot
    Pain --> Attack         : Finished animation
    Attack --> Dying        : Ran out of health
    Pain --> Dying          : Ran out of health
    Dying --> [*]           : After death animation

#!mermaid

stateDiagram-v2
    direction LR
    
    state intro {
        [*] --> Descending
        Descending --> Roar
        Roar --> [*]
    }
    state combat {
        [*] --> Attacking
        Attacking --> Pain
        Pain --> Attacking
    }
    state defeated {
        [*] --> Dying
        Dying --> Dead
        Dead --> [*]
    }

    [*] --> intro
    intro --> combat
    combat --> defeated
    defeated --> [*]

#!mermaid

stateDiagram-v2
    direction LR

    state intro {
        Descending --> Roar
        Roar --> Attacking
    }
    state combat {
        Attacking --> Pain
        Pain --> Attacking
    }
    state defeated {
        Dying --> Dead
    }

    [*] --> Descending
    combat --> Dying
    Dead --> [*]

    note left of combat: The boss is damageable in this state

#!mermaid

stateDiagram-v2
    direction LR

    state intro {
        Descending --> Roar : Movement Finished
        Roar --> Attacking  : Animation Finished
    }
    state combat {
        Attacking --> Pain  : Took Enough Damage
        Pain --> Attacking  : Animation Finished
    }
    state defeated {
        Dying --> Dead      : Animation Finished
    }

    [*] --> Descending      : Spotted player
    combat --> Dying        : Took enough damage
    Dead --> [*]            : AI Stopped

    note left of combat: The boss is damageable in this state

#!mermaid

stateDiagram-v2
    [*] --> Patroling
    Patroling --> Searching : I think I saw something...
    Searching --> Attacking : Enemy located
    Searching --> Patroling : Must be nothing
    Attacking --> Searching : Where did they go?
    Attacking --> Patroling : Enemy defeated
    Patroling --> Dead
    Searching --> Dead
    Attacking --> Dead
    Dead --> [*]

#!markdown

## Pie Chart

#!mermaid

pie 
    title Leading Causes of Developer Tears
    "JavaScript": 42
    "DNS": 8
    "Leaving a VM on": 15

#!markdown

## User Journey

#!mermaid

journey
    title Attend a Tech Conference
    Buy a Ticket: 4
    Check Schedule before Conference: 6
    Check in at Conference: 5
    Check Schedule at Conference: 4
    Attend Talk: 5
    Lunch: 3
    "Hallway Track": 5
    Post-Conference Movie: 7

#!mermaid

journey
    title Attend a Tech Conference
    Buy a Ticket: 4: Attendees, Point of Sales
    Check Schedule before Conference: 6: Attendees, Web Site
    Check in at Conference: 5: Attendees, Volunteers
    Check Schedule at Conference: 4: Attendees, Mobile App    
    Attend Talk: 5: Attendees, Speakers, Volunteers
    Lunch: 3: Attendees, Volunteers
    "Hallway Track": 5: Attendees, Volunteers
    Post-Conference Movie: 7: Attendees, Volunteers, Speakers

#!mermaid

journey
    title Attend a Tech Conference
    section Pre-Conference
        Buy a Ticket: 4
        Check Schedule before Conference: 6
    section Morning
        Check in at Conference: 5
        Check Schedule at Conference: 4
        Attend Talk: 5
    section Afternoon
        Lunch: 3
        "Hallway Track": 5
        Post-Conference Movie: 7

#!mermaid

journey
    title Attend a Tech Conference
    section Pre-Conference
        Buy a Ticket: 4: Attendees, Point of Sales
        Check Schedule before Conference: 6: Attendees, Web Site
    section Morning
        Check in at Conference: 5: Attendees, Volunteers
        Check Schedule at Conference: 4: Attendees, Mobile App    
        Attend Talk: 5: Attendees, Speakers, Volunteers
    section Afternoon
        Lunch: 3: Attendees, Volunteers
        "Hallway Track": 5: Attendees, Volunteers
        Post-Conference Movie: 7: Attendees, Volunteers, Speakers

#!mermaid

journey
    title Using Polyglot Notebooks
    section Setup
        Install Polyglot Notebooks : 5: Me
        Install NuGet Packages : 2 : Me
    section Usage
        %% # is not allowed
        Write CSharp in a Notebook : 5 : Me, dotnet
        Write FSharp in a Notebook : 5 : Me, dotnet
        Share Variables in a Notebook : 3 : Me
        Use Mermaid Diagrams : 4 : Me, Mermaid.js
        Troubleshoot Mermaid Issues : 1 : Me, Mermaid.js

#!markdown

## Mindmap (Not Yet Supported)

#!mermaid

mindmap
    Talk
        Notebooks
            What
            Why
            How
        Jupyter Notebooks
            IDEs
                VS Code
                DataSpell
                Web Browser
            Anaconda
        Polyglot Notebooks
            Installation
            Languages
                CSharp
                FSharp
                JS
                CSS
                SQL
                KQL
                Mermaid
                    Class Diagram
                    Gantt
                    Timeline
                    User Experience Journey
                    Pie Chart
                    ERD
                    Mindmaps
                    Requirements
            Variable Sharing
        Next Steps

#!markdown

Mindmap diagrams are not supported on Mermaid.js version 9.1.7, which is the current version used by Polyglot Notebooks, so here's a screenshot:

![Mindmap Diagram](images/Mindmap.png)

#!markdown

## Requirement Diagram

#!mermaid

requirementDiagram

requirement dark_theme {
    id: 1
    text: We need darkness
    risk: low
    verifymethod: inspection
}

#!mermaid

requirementDiagram

requirement dark_theme {
    id: 1
    text: Dark Themes Rule!
    risk: low
    verifymethod: inspection
}

#!mermaid

requirementDiagram

interfaceRequirement dark_theme {
    id: 1
    text: Dark Themes Rule!
    risk: low
    verifymethod: inspection
}

element revised_skin {
    type: css,
    docRef: theme.css
}

#!mermaid

requirementDiagram

interfaceRequirement dark_theme {
    id: 1
    text: Dark Themes Rule!
    risk: low
    verifymethod: inspection
}

performanceRequirement load_time {
    id: 2
    text: 200ms or less
    risk: medium
    verifymethod: analysis
}

element revised_skin {
    type: css,
    docRef: theme.css
}

#!mermaid

requirementDiagram

interfaceRequirement dark_theme {
    id: 1
    text: Dark Themes Rule!
    risk: low
    verifymethod: demonstration
}

performanceRequirement load_time {
    id: 2
    text: 200ms or less
    risk: medium
    verifymethod: test
}

functionalRequirement accessibility {
    id: 3
    text: Contrast
    risk: low
    verifymethod: inspection
}

element revised_skin {
    type: css,
    docRef: theme.css
}


element perf_test {
    type: unit test,
    docRef: LoadTest.cs
}

revised_skin - satisfies -> dark_theme
revised_skin - satisfies -> accessibility
revised_skin - satisfies -> load_time
perf_test - d -> load_time

#!markdown

## Context Diagram

#!mermaid

C4Context
title GitStractor Context Diagram

UpdateLayoutConfig($c4ShapeInRow="2", $c4BoundaryInRow="1")

Enterprise_Boundary(bMain, "GitStractor") {
    ContainerDb(cGit, "Git Repository", "git", "A locally-cloned git repository")

    Component(cGitStractor, "GitStractor Class Library", "C# Class Library", "Core library used for pulling data out of git repositories")

    Container_Boundary(bUI, "User Interface") {
        UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
        Container(cWPF, "GitStractor Desktop Edition", "Dotnet and C#", "Stand-Alone Utility for pulling and visualizing data")
        Container(cJupyter, "GitStractor Juypter Edition", "Jupyter Notebook", "Uses Python, Plotly, and Pandas to visualize data")
        Container(cBI, "Power BI Template", "Power BI", "Visualize Data with Dedicated Tooling")
    }

    Container(cExe, "GitStract.exe", "Dotnet and C#", "Pulls Git Information into data files")

    ContainerDb(cData, "Data Files", "CSV Files", "Stores information on commits and files")
}

Rel(cGitStractor, cGit, "Analyzes")
Rel(cGitStractor, cData, "Creates")
Rel(cExe, cGitStractor, "Uses")
Rel(cWPF, cGitStractor, "Uses")
Rel(cData, cWPF, "Used by")
Rel(cData, cJupyter, "Used by")
Rel(cData, cBI, "Used by")
