#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Launching a Task
Notebooks can be used to configure and launch occasional manual tasks instead of building a full application.

This notebook analyzes an image on disk using Azure Cognitive Services and displays the results to the user

#!markdown

### Configuration Options

#!csharp

string filePath = Path.Combine(Environment.CurrentDirectory, "../Images/JesterKeyboard.png");

#!markdown

### Setup

#!csharp

#r "nuget:Microsoft.Azure.CognitiveServices.Vision.ComputerVision"
#r "nuget:Newtonsoft.Json"

#!csharp

using Microsoft.Azure.CognitiveServices.Vision.ComputerVision;
using Microsoft.Azure.CognitiveServices.Vision.ComputerVision.Models;

using System.Collections.Generic;
using System.IO;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

#!csharp

// Determine what features we care about in our image
List<VisualFeatureTypes?> features = new() { 
    VisualFeatureTypes.Categories,
    VisualFeatureTypes.Description,
    VisualFeatureTypes.ImageType,
    VisualFeatureTypes.Tags,
    VisualFeatureTypes.Adult,
    VisualFeatureTypes.Objects,
    VisualFeatureTypes.Color,
    VisualFeatureTypes.Faces,
    VisualFeatureTypes.Brands,
};

#!markdown

### Load the Key and Endoint
These are secure and come from an `AzureCreds.json` file which is intentionally *not* versioned.

**Note for Future Matt:** Make sure you hide your `Polyglot Notebook: Variables` tab for this demo!

#!csharp

string endpoint = "https://???.cognitiveservices.azure.com/";
string apiKey = "GetYourOwn";

// Load configuration settings from AzureCreds.json
// NOTE: This file is not versioned by source control for key security
string credsFilePath = Path.Combine(Environment.CurrentDirectory, "AzureCreds.json");
using (StreamReader file = File.OpenText(credsFilePath)) {
    using (JsonTextReader reader = new(file)) {
        JObject jObj = (JObject)JToken.ReadFrom(reader);
        
        endpoint = jObj["endpoint"].Value<string>();
        apiKey = jObj["key"].Value<string>();
    }
}

#!csharp

// The credentials object lets us authenticate against Azure.
ApiKeyServiceClientCredentials credentials = new(apiKey);

// The Computer Vision Client lets us call out to Cognitive Services
ComputerVisionClient client = new(credentials);
client.Endpoint = endpoint;

#!markdown

Here is the image we'll send to Azure Cognitive Services:

![A puppy on a hand on a keyboard](../Images/JesterKeyboard.png)

#!csharp

ImageAnalysis analysis;

// Load the image's data into memory
using (Stream imageStream = File.OpenRead(filePath)) {
    
    // Send the image data to Azure Cognitive Services
    analysis = await client.AnalyzeImageInStreamAsync(imageStream, features);
}

#!markdown

### Exploring the Analysis Results

#!csharp

// Display the primary caption and its confidence
analysis.Description.Captions[0]

#!csharp

// Display Tags
foreach (ImageTag tag in analysis.Tags) {
    Console.WriteLine($"{tag.Name} ({tag.Confidence:P} Confidence)");
}

#!csharp

// Display color information
analysis.Color

#!csharp

// Is this adult, racy, or gory?
analysis.Adult

#!csharp

foreach (DetectedObject obj in analysis.Objects) {
    string bounds = $"{obj.Rectangle.X}, {obj.Rectangle.Y} by {obj.Rectangle.W}, {obj.Rectangle.H}";
    Console.WriteLine($"{obj.ObjectProperty} detected at {bounds} ({obj.Confidence:P} Confidence)");
}

#!csharp

analysis
