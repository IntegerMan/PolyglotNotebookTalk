#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Importing Code
Because not all code you care about should live in one file.

#!markdown

### Importing Code Files

Let's import a `Person` class defined in `Person.cs`:

#!csharp

#!import 02_Person.cs

#!csharp

// Instantate the Person class here
Person p = new Person();

p

#!markdown

### Installing Libraries via NuGet

With an internet connection you'd install NuGet Packages like this

#!csharp

#r "nuget:Bogus"

#!markdown

If you have custom NuGet feeds you want to use, you can register them with the `#i` directive:

```
#i "nuget:C:\myorg\mypackage\src\bin\Release"
#r "nuget:MyOrg.MyPackage"
```

You can also skip NuGet entirely and work with `.dll` files directly via syntax like this:

```
#r 'folder/myAssembly.dll'
```

---

#!markdown

Since, I'm demoing this knowing Internet is going to be offline or spotty so let's use pre-stored DLL files instead for this talk.

#!csharp

#r "..\DLLs\Bogus.dll"

#!csharp

using Bogus;

var faker = new Faker<Person>()
    .RuleFor(p => p.First, (f, p) => f.Name.FirstName())
    .RuleFor(p => p.Last, (f, p) => f.Name.LastName())
    .RuleFor(p => p.Phone, (f, p) => f.Phone.PhoneNumber())
    .RuleFor(p => p.Email, (f, p) => f.Internet.Email(p.First, p.Last));

faker.Generate()
